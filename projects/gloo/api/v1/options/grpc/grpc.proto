syntax = "proto3";
package grpc.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/parameters.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/grpc_json/grpc_json.proto";

// Service spec describing GRPC upstreams. This will usually be filled
// automatically via function discovery (if the upstream supports reflection).
// If your upstream service is a GRPC service, use this service spec (an empty
// spec is fine), to make sure that traffic to it is routed with http2.
// Deprecated: prefer using GrpcJsonTranscoder
message ServiceSpec {

  // Descriptors that contain information of the services listed below.
  // this is a serialized google.protobuf.FileDescriptorSet. These will be discovered if FDS is enabled and may be modified by Gloo.
  bytes descriptors = 1;

  // Describes a grpc service
  message GrpcService {
    // The package of this service.
    string package_name = 1;
    // The service name of this service.
    string service_name = 2;
    // The functions available in this service.
    repeated string function_names = 3;
  }

  // List of services used by this upstream. These services must be present in the descriptors.
  repeated GrpcService grpc_services = 2 [deprecated = true];

}

// This is only for upstream with Grpc service spec.
// Deprecated: prefer providing descriptors on Upstream in GrpcJsonTranscoder
message DestinationSpec {
  // The proto package of the function.
  string package = 1;
  // The name of the service of the function.
  string service = 2;
  // The name of the function.
  string function = 3;

  // Parameters describe how to extract the function parameters from the
  // request.
  transformation.options.gloo.solo.io.Parameters parameters = 4;
}