syntax = "proto3";

package envoy.extensions.cache.grpc.v2;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/cache/grpc";

option java_package = "io.envoyproxy.envoy.extensions.cache.grpc.v2";
option java_outer_classname = "GrpcCacheConfigProto";
option java_multiple_files = true;



import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/base.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/grpc_service.proto";
import "udpa/annotations/status.proto";


import "google/protobuf/duration.proto";
import "validate/validate.proto";

option (solo.io.udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Cache]

// [#proto-status: experimental]
message GrpcCacheConfig {

  // A GRPC service: this maps exactly to envoy GRPC service defintions
  .solo.io.envoy.config.core.v3.GrpcService service = 1 [(validate.rules).message = {required: true}];

  // Connection timeout  for retrieval from cache
  google.protobuf.Duration timeout = 2;

  // Max payload size to cache. This may be set to protect against large
  // requests or responses by not caching them.
  uint64 max_payload_size = 3;
}
