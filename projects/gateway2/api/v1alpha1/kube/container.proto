syntax = "proto3";
package kube.gateway.gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1/kube";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;

// A container image. See https://kubernetes.io/docs/concepts/containers/images
// for details.
message Image {
  // The image registry.
  string registry = 1;
  // The image repository (name).
  string repository = 2;
  // The image tag.
  string tag = 3;
  // The hash digest of the image, e.g. `sha256:12345...`
  string digest = 4;
  // The image pull policy for the container. See
  // https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
  // for details.
  PullPolicy pull_policy = 5;

  enum PullPolicy {
    // The image pull policy will be defaulted based on the image tag or digest.
    // See
    // https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    // for details.
    Unspecified = 0;
    // The image is pulled only if it is not already present locally.
    // See
    // https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    // for details.
    IfNotPresent = 1;
    // Every time the kubelet launches a container, the kubelet queries the
    // container image registry to resolve the name to an image digest. See
    // https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    // for details.
    Always = 2;
    // The kubelet does not try fetching the image. If the image is somehow
    // already present locally, the kubelet attempts to start the container;
    // otherwise, startup fails. See
    // https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    // for details.
    Never = 3;
  }
}

// Compute resources required by this container. See
// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
// for details.
message ResourceRequirements {
  // The maximum amount of compute resources allowed.
  map<string, string> limits = 1;
  // The minimum amount of compute resources required.
  map<string, string> requests = 2;
}
