// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type MatchableTcpGatewayWatcher interface {
	// watch namespace-scoped TcpGateways
	Watch(namespace string, opts clients.WatchOpts) (<-chan MatchableTcpGatewayList, <-chan error, error)
}

type MatchableTcpGatewayClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*MatchableTcpGateway, error)
	Write(resource *MatchableTcpGateway, opts clients.WriteOpts) (*MatchableTcpGateway, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (MatchableTcpGatewayList, error)
	MatchableTcpGatewayWatcher
}

type matchableTcpGatewayClient struct {
	rc clients.ResourceClient
}

func NewMatchableTcpGatewayClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (MatchableTcpGatewayClient, error) {
	return NewMatchableTcpGatewayClientWithToken(ctx, rcFactory, "")
}

func NewMatchableTcpGatewayClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (MatchableTcpGatewayClient, error) {
	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
		ResourceType: &MatchableTcpGateway{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base MatchableTcpGateway resource client")
	}
	return NewMatchableTcpGatewayClientWithBase(rc), nil
}

func NewMatchableTcpGatewayClientWithBase(rc clients.ResourceClient) MatchableTcpGatewayClient {
	return &matchableTcpGatewayClient{
		rc: rc,
	}
}

func (client *matchableTcpGatewayClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *matchableTcpGatewayClient) Register() error {
	return client.rc.Register()
}

func (client *matchableTcpGatewayClient) Read(namespace, name string, opts clients.ReadOpts) (*MatchableTcpGateway, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*MatchableTcpGateway), nil
}

func (client *matchableTcpGatewayClient) Write(matchableTcpGateway *MatchableTcpGateway, opts clients.WriteOpts) (*MatchableTcpGateway, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(matchableTcpGateway, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*MatchableTcpGateway), nil
}

func (client *matchableTcpGatewayClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *matchableTcpGatewayClient) List(namespace string, opts clients.ListOpts) (MatchableTcpGatewayList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToMatchableTcpGateway(resourceList), nil
}

func (client *matchableTcpGatewayClient) Watch(namespace string, opts clients.WatchOpts) (<-chan MatchableTcpGatewayList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	tcpGatewaysChan := make(chan MatchableTcpGatewayList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				select {
				case tcpGatewaysChan <- convertToMatchableTcpGateway(resourceList):
				case <-opts.Ctx.Done():
					close(tcpGatewaysChan)
					return
				}
			case <-opts.Ctx.Done():
				close(tcpGatewaysChan)
				return
			}
		}
	}()
	return tcpGatewaysChan, errs, nil
}

func convertToMatchableTcpGateway(resources resources.ResourceList) MatchableTcpGatewayList {
	var matchableTcpGatewayList MatchableTcpGatewayList
	for _, resource := range resources {
		matchableTcpGatewayList = append(matchableTcpGatewayList, resource.(*MatchableTcpGateway))
	}
	return matchableTcpGatewayList
}
